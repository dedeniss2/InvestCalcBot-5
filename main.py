import logging
import sqlite3
import asyncio
from datetime import datetime
import yfinance as yf
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç @BotFather, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
TOKEN = "7654401250:AAG2U97kJZRYos7za6bS2QZyN3Y-6KFpJnE"

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
DB_PATH = "investments.db"

# –ö–Ω–æ–ø–∫–∏
REPLY_KEYBOARD = ReplyKeyboardMarkup(
    [["üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å", "‚ûï –î–æ–±–∞–≤–∏—Ç—å"], ["‚ûñ –£–¥–∞–ª–∏—Ç—å", "‚ö†Ô∏è –ê–ª–µ—Ä—Ç—ã"]],
    resize_keyboard=True)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_PATH, timeout=10)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS investments
                     (asset TEXT, price_min REAL, price_max REAL)''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞
async def get_asset_price(ticker: str, attempt: int = 1, max_attempts: int = 3) -> float:
    try:
        data = yf.Ticker(ticker).history(period="1d")
        if data.empty:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt} –¥–ª—è {ticker} –Ω–µ —É–¥–∞–ª–∞—Å—å: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö")
            if attempt < max_attempts:
                await asyncio.sleep(2)
                return await get_asset_price(ticker, attempt + 1, max_attempts)
            raise ValueError(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è {ticker} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return data["Close"].iloc[-1]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {ticker}: {e}")
        if attempt < max_attempts:
            await asyncio.sleep(2)
            return await get_asset_price(ticker, attempt + 1, max_attempts)
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
async def check_alerts(application):
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞—á–∞—Ç–∞")
    try:
        conn = sqlite3.connect(DB_PATH, timeout=10)
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT asset, price_min, price_max FROM investments")
        tickers = cursor.fetchall()
        conn.close()

        for ticker, price_min, price_max in tickers:
            try:
                price = await get_asset_price(ticker)
                logger.info(f"‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {ticker}: {price}")
                message = f"–¶–µ–Ω–∞ {ticker}: {price:.2f}"
                if price_min and price < price_min:
                    message += f"\n‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ ({price_min})!"
                if price_max and price > price_max:
                    message += f"\n‚ö†Ô∏è –¶–µ–Ω–∞ –≤—ã—à–µ –º–∞–∫—Å–∏–º—É–º–∞ ({price_max})!"
                await application.bot.send_message(chat_id=784622780, text=message)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {ticker}: {e}")
                await application.bot.send_message(chat_id=784622780, text=f"–û—à–∏–±–∫–∞ –¥–ª—è {ticker}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_alerts: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç chat_id: {update.message.chat_id}")
    await update.message.reply_text(
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã: /portfolio, /add_ticker, /remove_ticker, /list_tickers, /set_alert",
        reply_markup=REPLY_KEYBOARD)

# –ö–æ–º–∞–Ω–¥–∞ /portfolio –∏–ª–∏ /list_tickers
async def portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /portfolio –æ—Ç chat_id: {update.message.chat_id}")
    try:
        conn = sqlite3.connect(DB_PATH, timeout=10)
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT asset, price_min, price_max FROM investments")
        tickers = cursor.fetchall()
        conn.close()
        if tickers:
            message = "üìä –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n\n"
            message += "–¢–∏–∫er | –ú–∏–Ω. —Ü–µ–Ω–∞ | –ú–∞–∫—Å. —Ü–µ–Ω–∞\n"
            message += "------|-----------|-----------\n"
            for ticker, price_min, price_max in tickers:
                message += f"{ticker:<6} | {price_min or '–Ω–µ –∑–∞–¥–∞–Ω':<10} | {price_max or '–Ω–µ –∑–∞–¥–∞–Ω':<10}\n"
            await update.message.reply_text(f"<pre>{message}</pre>", parse_mode="HTML")
        else:
            await update.message.reply_text("üìä –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.", reply_markup=REPLY_KEYBOARD)
    except sqlite3.OperationalError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=REPLY_KEYBOARD)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}", reply_markup=REPLY_KEYBOARD)

# –ö–æ–º–∞–Ω–¥–∞ /add_ticker
async def add_ticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /add_ticker –æ—Ç chat_id: {update.message.chat_id}")
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫er, –Ω–∞–ø—Ä–∏–º–µ—Ä: /add_ticker TSLA", reply_markup=REPLY_KEYBOARD)
        return
    ticker = context.args[0].upper()
    try:
        price = await get_asset_price(ticker)
        conn = sqlite3.connect(DB_PATH, timeout=10)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO investments (asset) VALUES (?)", (ticker,))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"‚ûï –¢–∏–∫er {ticker} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å. –¶–µ–Ω–∞: {price:.2f}", reply_markup=REPLY_KEYBOARD)
    except sqlite3.OperationalError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–∞ {ticker}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=REPLY_KEYBOARD)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–∞ {ticker}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {ticker}: {e}", reply_markup=REPLY_KEYBOARD)

# –ö–æ–º–∞–Ω–¥–∞ /remove_ticker
async def remove_ticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /remove_ticker –æ—Ç chat_id: {update.message.chat_id}")
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫er, –Ω–∞–ø—Ä–∏–º–µ—Ä: /remove_ticker TSLA", reply_markup=REPLY_KEYBOARD)
        return
    ticker = context.args[0].upper()
    try:
        conn = sqlite3.connect(DB_PATH, timeout=10)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM investments WHERE asset = ?", (ticker,))
        conn.commit()
        if cursor.rowcount > 0:
            await update.message.reply_text(f"‚ûñ –¢–∏–∫er {ticker} —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è.", reply_markup=REPLY_KEYBOARD)
        else:
            await update.message.reply_text(f"–¢–∏–∫er {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ.", reply_markup=REPLY_KEYBOARD)
        conn.close()
    except sqlite3.OperationalError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–∞ {ticker}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=REPLY_KEYBOARD)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–∞ {ticker}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {ticker}: {e}", reply_markup=REPLY_KEYBOARD)

# –ö–æ–º–∞–Ω–¥–∞ /set_alert
async def set_alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /set_alert –æ—Ç chat_id: {update.message.chat_id}")
    if len(context.args) != 3:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫er, –º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_alert TSLA 200 300", reply_markup=REPLY_KEYBOARD)
        return
    ticker = context.args[0].upper()
    try:
        price_min = float(context.args[1])
        price_max = float(context.args[2])
        conn = sqlite3.connect(DB_PATH, timeout=10)
        cursor = conn.cursor()
        cursor.execute("UPDATE investments SET price_min = ?, price_max = ? WHERE asset = ?", (price_min, price_max, ticker))
        conn.commit()
        if cursor.rowcount > 0:
            await update.message.reply_text(f"‚ö†Ô∏è –ê–ª–µ—Ä—Ç –¥–ª—è {ticker} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –º–∏–Ω {price_min}, –º–∞–∫—Å {price_max}", reply_markup=REPLY_KEYBOARD)
        else:
            await update.message.reply_text(f"–¢–∏–∫er {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ.", reply_markup=REPLY_KEYBOARD)
        conn.close()
    except ValueError:
        await update.message.reply_text("–ú–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_alert TSLA 200 300", reply_markup=REPLY_KEYBOARD)
    except sqlite3.OperationalError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è {ticker}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=REPLY_KEYBOARD)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è {ticker}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}", reply_markup=REPLY_KEYBOARD)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{text}' –æ—Ç chat_id: {update.message.chat_id}")
    if text == "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å":
        await portfolio(update, context)
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫er, –Ω–∞–ø—Ä–∏–º–µ—Ä: /add_ticker TSLA", reply_markup=REPLY_KEYBOARD)
    elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å":
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫er, –Ω–∞–ø—Ä–∏–º–µ—Ä: /remove_ticker TSLA", reply_markup=REPLY_KEYBOARD)
    elif text == "‚ö†Ô∏è –ê–ª–µ—Ä—Ç—ã":
        await update.message.reply_text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–ª–µ—Ä—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_alert TSLA 200 300", reply_markup=REPLY_KEYBOARD)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã: /portfolio, /add_ticker, /remove_ticker, /set_alert", reply_markup=REPLY_KEYBOARD)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("portfolio", portfolio))
    application.add_handler(CommandHandler("list_tickers", portfolio))
    application.add_handler(CommandHandler("add_ticker", add_ticker))
    application.add_handler(CommandHandler("remove_ticker", remove_ticker))
    application.add_handler(CommandHandler("set_alert", set_alert))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_alerts, "interval", hours=1, args=[application])
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å polling
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å polling...")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
